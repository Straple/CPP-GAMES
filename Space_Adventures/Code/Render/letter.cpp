const char* small_letters[][7] = {
"",
"",
" 000", // a
"    0",
" 0000",
"0   0",
" 0000",

"0", // b
"0",
"0 00",
"00  0",
"0   0",
"0   0",
"0000",

"",
"",
" 000", // c
"0",
"0",
"0   0",
" 000",

"    0", // d
"    0",
" 00 0",
"0  00",
"0   0",
"0   0",
" 0000",

"",
"",
" 000", // e
"0   0",
"00000",
"0",
" 000",

"  00", // f
" 0  0",
" 0",
"000",
" 0",
" 0",
" 0",

" 0000", // g
"0   0",
"0   0",
" 0000",
"    0",
"    0",
" 000",

"0", // h
"0",
"0 00",
"00  0",
"0   0",
"0   0",
"0   0",

"0", // i
"",
"0",
"0",
"0",
"0",
"0",

"  0", // j
"",
"000",
"  0",
"  0",
"  0",
" 0",

"0", // k
"0",
"0  0",
"0 0",
"00",
"0 0",
"0  0",

"0", // l
"0",
"0",
"0",
"0",
"0",
"0",

"",
"",
"00 0", // m
"0 0 0",
"0 0 0",
"0   0",
"0   0",

"",
"",
"0 00", // n
"00  0",
"0   0",
"0   0",
"0   0",

"",
"",
" 000", // o
"0   0",
"0   0",
"0   0",
" 000",

"0000", // p
"0   0",
"0   0",
"0000",
"0",
"0",
"0",

" 000", // q
"0   0",
"0   0",
"0   0",
" 000",
"   0",
"  0",

"",
"",
"0 00", // r
"00  0",
"0",
"0",
"0",

"",
"",
" 000", // s
"0",
" 000",
"    0",
"0000",

" 0", // t
" 0",
"000",
" 0",
" 0",
" 0",
"  00",

"",
"",
"0   0", // u
"0   0",
"0   0",
"0   0",
" 000",

"",
"",
"0   0", // v
"0   0",
"0   0",
" 0 0",
"  0",

"",
"",
"0   0", // w
"0   0",
"0 0 0",
"0 0 0",
" 0 0",

"",
"",
"0   0", // x
" 0 0",
"  0",
" 0 0",
"0   0",

"0   0", // y
"0   0",
"0   0",
" 0000",
"    0",
"    0",
" 000",

"",
"",
"00000", // z
"   0",
"  0",
" 0",
"00000",
};
const char* letters[][7] = {
" 000",
"0   0", // A
"0   0",
"0   0",
"00000",
"0   0",
"0   0",

"0000",
"0   0",
"0   0", // B
"0000",
"0   0",
"0   0",
"0000",

" 000",
"0   0",
"0", // C
"0",
"0",
"0   0",
" 000",


"0000",
"0   0",
"0   0", // D
"0   0",
"0   0",
"0   0",
"0000",

"00000",
"0",
"0",		// E
"0000",
"0",
"0",
"00000",

"00000",
"0",
"0",		// F
"0000",
"0",
"0",
"0",

" 000",
"0   0",
"0",		// G
"0 000",
"0   0",
"0   0",
" 000",

"0   0",
"0   0",
"0   0",	// H
"00000",
"0   0",
"0   0",
"0   0",

"000",
" 0",
" 0",		// I
" 0",
" 0",
" 0",
"000",

"  000",
"    0",
"    0",	 // J
"    0",
"    0",
"0   0",
" 000",

"0   0", // K
"0  0",
"0 0",
"00",
"0 0",
"0  0",
"0   0",

"0",
"0",
"0", // L
"0",
"0",
"0",
"00000",


"0   0", // M
"00 00",
"0 0 0",
"0   0",
"0   0",
"0   0",
"0   0",

"0   0", // N
"0   0",
"00  0",
"0 0 0",
"0  00",
"0   0",
"0   0",


" 000 ",
"0   0",
"0   0", // O
"0   0",
"0   0",
"0   0",
" 000",


"0000",
"0   0",
"0   0", // P
"0000",
"0",
"0",
"0",

" 000", // Q
"0   0",
"0   0",
"0   0",
"0 0 0",
"0  0",
" 00 0",


"0000", // R
"0   0",
"0   0",
"0000",
"0 0",
"0  0",
"0   0",


" 0000", // S
"0",
"0",
" 000",
"    0",
"    0",
"0000",


"00000",
"  0",
"  0", // T
"  0",
"  0",
"  0",
"  0",

"0   0", // U
"0   0",
"0   0",
"0   0",
"0   0",
"0   0",
" 000",


"0   0", // V
"0   0",
"0   0",
"0   0",
" 0 0",
" 0 0",
"  0",

"0   0", // W
"0   0",
"0   0",
"0 0 0",
"0 0 0",
"0 0 0",
" 0 0",


"0   0",
"0   0",
" 0 0", // X
"  0",
" 0 0",
"0   0",
"0   0",


"0   0", // Y
"0   0",
"0   0",
" 0 0",
"  0",
"  0",
"  0",

"00000", // Z
"    0",
"   0",
"  0",
" 0",
"0",
"00000",
};
const char* digits[][7] = {
" 000", // 0
"0   0",
"0  00",
"0 0 0",
"00  0",
"0   0",
" 000",

" 0", // 1
"00",
" 0",
" 0",
" 0",
" 0",
" 0",

" 000", // 2
"0   0",
"    0",
"   0",
"  0",
" 0",
"00000",

" 000", // 3
"0   0",
"    0",
"  00",
"    0",
"0   0",
" 000",

"   0", // 4
"  00",
" 0 0",
"0  0",
"00000",
"   0",
"   0",

"00000", // 5
"0",
"0000",
"    0",
"    0",
"0   0",
" 000",

" 000", // 6
"0   0",
"0",
"0000",
"0   0",
"0   0",
" 000",

"00000", // 7
"    0",
"    0",
"   0",
"   0",
"  0",
"  0",

" 000", // 8
"0   0",
"0   0",
" 000",
"0   0",
"0   0",
" 000",

" 000", // 9
"0   0",
"0   0",
" 0000",
"    0",
"0   0",
" 000",
};
const char* symbols[][7] = {
"", // -
"",
"",
" 000",
"",
"",
"",

"", // .
"",
"",
"",
"",
"",
"0",
};

// принимает букву
// возвращает ссылку на заглавную или строчную
const char** get_letter(char letter) {
	return (is_between('a', letter, 'z') ? small_letters[letter - 'a'] : letters[letter - 'A']);
}

const char** get_symbol(char symbol) {
	return symbol == '-' ? symbols[0] : symbols[1];
}

const char** get_arr_char(char arr) {
	return is_between('0', arr, '9') ? digits[arr - '0'] : (arr == '-' || arr == '.' ? get_symbol(arr) : get_letter(arr));
}

/* return letter len on x */
int arr_char_len(char arr) {
	int right_x = -1;

	const char** a_arr = get_arr_char(arr);
	for (int i = 0; i < 7; i++) {
		const char* row = a_arr[i];
		for (int j = 1; *row; j++) {
			if (*row == '0') {
				if (right_x == -1 || j > right_x) {
					right_x = j;
				}
			}
			row++;
		}
	}
	return right_x + 1;
}

/*
return symbol len on x
if symbol == letter: then return letter len on x
if symbol == space: then return 4
if symbol == '.': then return 2*/
int symbol_len(char symbol) {
	if (symbol == ' ') {
		return 4;
	}
	else {
		return arr_char_len(symbol);
	}
}

/* return text len on x
   example: "Hello world..."
*/
int text_len(const char* text) {
	int len = 0;
	while (*text) {
		len += symbol_len(*text);
		text++;
	}
	return len;
}